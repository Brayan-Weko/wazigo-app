version: '3.8'

services:
  # Application Flask
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart_route_app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://smartroute:${DB_PASSWORD}@db:5432/smartroute
      - REDIS_URL=redis://redis:6379/0
      - HERE_API_KEY=${HERE_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartroute_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: smart_route_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=smartroute
      - POSTGRES_USER=smartroute
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - smartroute_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartroute -d smartroute"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis pour cache et queues
  redis:
    image: redis:7-alpine
    container_name: smart_route_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - smartroute_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Celery Worker pour tâches asynchrones
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart_route_worker
    restart: unless-stopped
    command: celery -A backend.tasks.celery worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://smartroute:${DB_PASSWORD}@db:5432/smartroute
      - REDIS_URL=redis://redis:6379/0
      - HERE_API_KEY=${HERE_API_KEY}
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - smartroute_network
    healthcheck:
      test: ["CMD", "celery", "-A", "backend.tasks.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat pour tâches programmées
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart_route_beat
    restart: unless-stopped
    command: celery -A backend.tasks.celery beat --loglevel=info --scheduler=celery.beat:PersistentScheduler
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://smartroute:${DB_PASSWORD}@db:5432/smartroute
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      - db
      - redis
    networks:
      - smartroute_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: smart_route_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/static:/var/www/static:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - smartroute_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: smart_route_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - smartroute_network

  # Grafana pour dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: smart_route_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - smartroute_network

  # Elasticsearch pour logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: smart_route_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - smartroute_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana pour visualisation des logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: smart_route_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - smartroute_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  smartroute_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16