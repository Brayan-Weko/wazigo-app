user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   '$request_time $upstream_response_time';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate no_last_modified no_etag auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https:; img-src 'self' data: https:; media-src 'self' data: https:; font-src 'self' data: https:;" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # Upstream servers
    upstream app_servers {
        least_conn;
        server app:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Main server configuration
    server {
        listen 80;
        server_name smartroute.local;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name smartroute.local;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Root and index
        root /var/www;
        index index.html;

        # Max body size
        client_max_body_size 10M;

        # Static files with long cache
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Gzip static files
            gzip_static on;
            
            # Handle missing files
            try_files $uri $uri/ =404;
        }

        # PWA files
        location ~* \.(manifest|webmanifest)$ {
            expires 1w;
            add_header Cache-Control "public";
        }

        location = /sw.js {
            expires 0;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # API routes with rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://app_servers;
            include /etc/nginx/proxy_params;
        }

        # Auth endpoints with stricter rate limiting
        location /auth/ {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://app_servers;
            include /etc/nginx/proxy_params;
        }

        # Health check
        location /health {
            proxy_pass http://app_servers;
            access_log off;
        }

        # All other requests to Flask app
        location / {
            proxy_pass http://app_servers;
            include /etc/nginx/proxy_params;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /500.html;

        location = /404.html {
            internal;
            proxy_pass http://app_servers;
        }

        location = /500.html {
            internal;
            proxy_pass http://app_servers;
        }
    }

    # Include additional configurations
    include /etc/nginx/sites-available/*;
}